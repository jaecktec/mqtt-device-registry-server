import * as Loki from 'lokijs';import { Device } from './device';import { Value } from './value';export interface DatabaseTables {    Device: Loki.Collection<Device>;    Value: Loki.Collection<Value>;    Database: Loki.Database;}export class DatabaseHandler {    constructor(private databaseName = 'database.json') {    }    public async start(): Promise<DatabaseTables> {        return new Promise<DatabaseTables>(resolve => {            const database: Loki.Database = new Loki(this.databaseName, {                autoload: true,                autoloadCallback: () => {                    resolve({                        Device: this.getOrCreate(database, 'device'),                        Value: this.getOrCreate(database, 'value'),                        Database: database                    });                },                autosave: true,                autosaveInterval: 10000            });        });    }    private getOrCreate<T>(database: Loki.Database, dbName: string): Loki.Collection<T> {        let result = database.getCollection(dbName);        if (!result) {            result = database.addCollection(dbName);        }        return result;    }}export const database = new DatabaseHandler().start();