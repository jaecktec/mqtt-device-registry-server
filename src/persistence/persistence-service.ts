import { DatabaseTables } from './database';import { DeviceConnection } from '../mqtt/device-connection/device-connection';import { Device } from './device';import { isNullOrUndefined } from 'util';import * as debugFn from 'debug';const debug = debugFn('app.test.persistence-service.test.ts');export class PersistenceService {    constructor(private tables: DatabaseTables) {    }    public handleNewDevices(connections: Array<DeviceConnection>) {        // connections.forEach((c) =>        for (let idx = 0; idx < connections.length; idx++) {            const c = connections[idx];            const device: Device = this.tables.Device.findOne({                nodeId: c.getNodeId(),                id: c.getDeviceId()            });            debug(device);            if (isNullOrUndefined(device)) {                this.tables.Device.insert({                    nodeId: c.getNodeId(),                    id: c.getDeviceId(),                    created: new Date(),                    connected: new Date()                });            } else {                device.connected = new Date();                device.disconnected = undefined;                this.tables.Device.update(device);            }        }        // );    }    public handleNodeDisconnect(connections: Array<DeviceConnection>) {        connections.forEach(c => {            const dev = this.tables.Device.findOne({                nodeId: c.getNodeId(),                id: c.getDeviceId()            });            dev.disconnected = new Date();            this.tables.Device.update(dev);        });    }    public handleDeviceValue(connections: Array<DeviceConnection>) {        connections.forEach(c => {            while (c.getNumMessages()) {                this.tables.Value.insert({                    nodeId: c.getNodeId(),                    deviceId: c.getDeviceId(),                    timestamp: new Date(),                    data: c.getMessage()                });            }        });    }}